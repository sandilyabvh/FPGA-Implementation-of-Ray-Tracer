-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rayTriangleIntersect_rayTriangleIntersect_Pipeline_VITIS_LOOP_20_2_VITIS_LOOP_22_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_P1_DRAM_AWVALID : OUT STD_LOGIC;
    m_axi_P1_DRAM_AWREADY : IN STD_LOGIC;
    m_axi_P1_DRAM_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_P1_DRAM_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P1_DRAM_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P1_DRAM_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P1_DRAM_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P1_DRAM_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P1_DRAM_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P1_DRAM_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P1_DRAM_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P1_DRAM_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P1_DRAM_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P1_DRAM_WVALID : OUT STD_LOGIC;
    m_axi_P1_DRAM_WREADY : IN STD_LOGIC;
    m_axi_P1_DRAM_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P1_DRAM_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P1_DRAM_WLAST : OUT STD_LOGIC;
    m_axi_P1_DRAM_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P1_DRAM_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P1_DRAM_ARVALID : OUT STD_LOGIC;
    m_axi_P1_DRAM_ARREADY : IN STD_LOGIC;
    m_axi_P1_DRAM_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_P1_DRAM_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P1_DRAM_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P1_DRAM_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P1_DRAM_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P1_DRAM_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P1_DRAM_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P1_DRAM_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P1_DRAM_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P1_DRAM_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P1_DRAM_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P1_DRAM_RVALID : IN STD_LOGIC;
    m_axi_P1_DRAM_RREADY : OUT STD_LOGIC;
    m_axi_P1_DRAM_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P1_DRAM_RLAST : IN STD_LOGIC;
    m_axi_P1_DRAM_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P1_DRAM_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P1_DRAM_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P1_DRAM_BVALID : IN STD_LOGIC;
    m_axi_P1_DRAM_BREADY : OUT STD_LOGIC;
    m_axi_P1_DRAM_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P1_DRAM_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P1_DRAM_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_AWVALID : OUT STD_LOGIC;
    m_axi_P2_DRAM_AWREADY : IN STD_LOGIC;
    m_axi_P2_DRAM_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_P2_DRAM_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P2_DRAM_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P2_DRAM_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P2_DRAM_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P2_DRAM_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P2_DRAM_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P2_DRAM_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P2_DRAM_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P2_DRAM_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_WVALID : OUT STD_LOGIC;
    m_axi_P2_DRAM_WREADY : IN STD_LOGIC;
    m_axi_P2_DRAM_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P2_DRAM_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P2_DRAM_WLAST : OUT STD_LOGIC;
    m_axi_P2_DRAM_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_ARVALID : OUT STD_LOGIC;
    m_axi_P2_DRAM_ARREADY : IN STD_LOGIC;
    m_axi_P2_DRAM_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_P2_DRAM_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P2_DRAM_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P2_DRAM_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P2_DRAM_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P2_DRAM_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P2_DRAM_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P2_DRAM_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P2_DRAM_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P2_DRAM_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_RVALID : IN STD_LOGIC;
    m_axi_P2_DRAM_RREADY : OUT STD_LOGIC;
    m_axi_P2_DRAM_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P2_DRAM_RLAST : IN STD_LOGIC;
    m_axi_P2_DRAM_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P2_DRAM_BVALID : IN STD_LOGIC;
    m_axi_P2_DRAM_BREADY : OUT STD_LOGIC;
    m_axi_P2_DRAM_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P2_DRAM_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P2_DRAM_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_AWVALID : OUT STD_LOGIC;
    m_axi_P3_DRAM_AWREADY : IN STD_LOGIC;
    m_axi_P3_DRAM_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_P3_DRAM_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P3_DRAM_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P3_DRAM_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P3_DRAM_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P3_DRAM_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P3_DRAM_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P3_DRAM_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P3_DRAM_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P3_DRAM_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_WVALID : OUT STD_LOGIC;
    m_axi_P3_DRAM_WREADY : IN STD_LOGIC;
    m_axi_P3_DRAM_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P3_DRAM_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P3_DRAM_WLAST : OUT STD_LOGIC;
    m_axi_P3_DRAM_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_ARVALID : OUT STD_LOGIC;
    m_axi_P3_DRAM_ARREADY : IN STD_LOGIC;
    m_axi_P3_DRAM_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_P3_DRAM_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P3_DRAM_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P3_DRAM_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P3_DRAM_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P3_DRAM_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P3_DRAM_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_P3_DRAM_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P3_DRAM_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_P3_DRAM_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_RVALID : IN STD_LOGIC;
    m_axi_P3_DRAM_RREADY : OUT STD_LOGIC;
    m_axi_P3_DRAM_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_P3_DRAM_RLAST : IN STD_LOGIC;
    m_axi_P3_DRAM_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P3_DRAM_BVALID : IN STD_LOGIC;
    m_axi_P3_DRAM_BREADY : OUT STD_LOGIC;
    m_axi_P3_DRAM_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_P3_DRAM_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_P3_DRAM_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln20_2 : IN STD_LOGIC_VECTOR (61 downto 0);
    sext_ln20_1 : IN STD_LOGIC_VECTOR (61 downto 0);
    sext_ln20 : IN STD_LOGIC_VECTOR (61 downto 0);
    P1_V_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    P1_V_0_ce0 : OUT STD_LOGIC;
    P1_V_0_we0 : OUT STD_LOGIC;
    P1_V_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P2_V_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    P2_V_0_ce0 : OUT STD_LOGIC;
    P2_V_0_we0 : OUT STD_LOGIC;
    P2_V_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P3_V_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    P3_V_0_ce0 : OUT STD_LOGIC;
    P3_V_0_we0 : OUT STD_LOGIC;
    P3_V_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P1_V_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    P1_V_1_ce0 : OUT STD_LOGIC;
    P1_V_1_we0 : OUT STD_LOGIC;
    P1_V_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P2_V_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    P2_V_1_ce0 : OUT STD_LOGIC;
    P2_V_1_we0 : OUT STD_LOGIC;
    P2_V_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P3_V_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    P3_V_1_ce0 : OUT STD_LOGIC;
    P3_V_1_we0 : OUT STD_LOGIC;
    P3_V_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P1_V_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    P1_V_2_ce0 : OUT STD_LOGIC;
    P1_V_2_we0 : OUT STD_LOGIC;
    P1_V_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P2_V_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    P2_V_2_ce0 : OUT STD_LOGIC;
    P2_V_2_we0 : OUT STD_LOGIC;
    P2_V_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    P3_V_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    P3_V_2_ce0 : OUT STD_LOGIC;
    P3_V_2_we0 : OUT STD_LOGIC;
    P3_V_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of rayTriangleIntersect_rayTriangleIntersect_Pipeline_VITIS_LOOP_20_2_VITIS_LOOP_22_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_4A10 : STD_LOGIC_VECTOR (14 downto 0) := "100101000010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln20_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln20_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal P3_DRAM_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal P2_DRAM_blk_n_R : STD_LOGIC;
    signal P1_DRAM_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal P1_DRAM_addr_read_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal P2_DRAM_addr_read_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal P3_DRAM_addr_read_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln20_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln20_fu_329_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_90 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln22_fu_364_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_94 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln20_1_fu_343_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_fu_98 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln20_fu_288_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln22_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_1_fu_337_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rayTriangleIntersect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component rayTriangleIntersect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_94 <= ap_const_lv13_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i_fu_94 <= select_ln20_1_fu_343_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln20_fu_282_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_98 <= add_ln20_fu_288_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_98 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_90 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    j_fu_90 <= add_ln22_fu_364_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                P1_DRAM_addr_read_reg_420 <= m_axi_P1_DRAM_RDATA;
                P2_DRAM_addr_read_reg_427 <= m_axi_P2_DRAM_RDATA;
                P3_DRAM_addr_read_reg_434 <= m_axi_P3_DRAM_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln20_reg_416 <= icmp_ln20_fu_282_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    P1_DRAM_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_P1_DRAM_RVALID, icmp_ln20_reg_416, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_416 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            P1_DRAM_blk_n_R <= m_axi_P1_DRAM_RVALID;
        else 
            P1_DRAM_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    P1_V_0_address0 <= zext_ln20_fu_351_p1(13 - 1 downto 0);

    P1_V_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P1_V_0_ce0 <= ap_const_logic_1;
        else 
            P1_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P1_V_0_d0 <= P1_DRAM_addr_read_reg_420;

    P1_V_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln20_fu_329_p3)
    begin
        if (((select_ln20_fu_329_p3 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P1_V_0_we0 <= ap_const_logic_1;
        else 
            P1_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    P1_V_1_address0 <= zext_ln20_fu_351_p1(13 - 1 downto 0);

    P1_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P1_V_1_ce0 <= ap_const_logic_1;
        else 
            P1_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P1_V_1_d0 <= P1_DRAM_addr_read_reg_420;

    P1_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln20_fu_329_p3)
    begin
        if (((select_ln20_fu_329_p3 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P1_V_1_we0 <= ap_const_logic_1;
        else 
            P1_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    P1_V_2_address0 <= zext_ln20_fu_351_p1(13 - 1 downto 0);

    P1_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P1_V_2_ce0 <= ap_const_logic_1;
        else 
            P1_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P1_V_2_d0 <= P1_DRAM_addr_read_reg_420;

    P1_V_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln20_fu_329_p3)
    begin
        if ((not((select_ln20_fu_329_p3 = ap_const_lv2_0)) and not((select_ln20_fu_329_p3 = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P1_V_2_we0 <= ap_const_logic_1;
        else 
            P1_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    P2_DRAM_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln20_reg_416, m_axi_P2_DRAM_RVALID, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_416 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            P2_DRAM_blk_n_R <= m_axi_P2_DRAM_RVALID;
        else 
            P2_DRAM_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    P2_V_0_address0 <= zext_ln20_fu_351_p1(13 - 1 downto 0);

    P2_V_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P2_V_0_ce0 <= ap_const_logic_1;
        else 
            P2_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P2_V_0_d0 <= P2_DRAM_addr_read_reg_427;

    P2_V_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln20_fu_329_p3)
    begin
        if (((select_ln20_fu_329_p3 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P2_V_0_we0 <= ap_const_logic_1;
        else 
            P2_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    P2_V_1_address0 <= zext_ln20_fu_351_p1(13 - 1 downto 0);

    P2_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P2_V_1_ce0 <= ap_const_logic_1;
        else 
            P2_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P2_V_1_d0 <= P2_DRAM_addr_read_reg_427;

    P2_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln20_fu_329_p3)
    begin
        if (((select_ln20_fu_329_p3 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P2_V_1_we0 <= ap_const_logic_1;
        else 
            P2_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    P2_V_2_address0 <= zext_ln20_fu_351_p1(13 - 1 downto 0);

    P2_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P2_V_2_ce0 <= ap_const_logic_1;
        else 
            P2_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P2_V_2_d0 <= P2_DRAM_addr_read_reg_427;

    P2_V_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln20_fu_329_p3)
    begin
        if ((not((select_ln20_fu_329_p3 = ap_const_lv2_0)) and not((select_ln20_fu_329_p3 = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P2_V_2_we0 <= ap_const_logic_1;
        else 
            P2_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    P3_DRAM_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln20_reg_416, m_axi_P3_DRAM_RVALID, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_416 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            P3_DRAM_blk_n_R <= m_axi_P3_DRAM_RVALID;
        else 
            P3_DRAM_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    P3_V_0_address0 <= zext_ln20_fu_351_p1(13 - 1 downto 0);

    P3_V_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P3_V_0_ce0 <= ap_const_logic_1;
        else 
            P3_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P3_V_0_d0 <= P3_DRAM_addr_read_reg_434;

    P3_V_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln20_fu_329_p3)
    begin
        if (((select_ln20_fu_329_p3 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P3_V_0_we0 <= ap_const_logic_1;
        else 
            P3_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    P3_V_1_address0 <= zext_ln20_fu_351_p1(13 - 1 downto 0);

    P3_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P3_V_1_ce0 <= ap_const_logic_1;
        else 
            P3_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P3_V_1_d0 <= P3_DRAM_addr_read_reg_434;

    P3_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln20_fu_329_p3)
    begin
        if (((select_ln20_fu_329_p3 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P3_V_1_we0 <= ap_const_logic_1;
        else 
            P3_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    P3_V_2_address0 <= zext_ln20_fu_351_p1(13 - 1 downto 0);

    P3_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P3_V_2_ce0 <= ap_const_logic_1;
        else 
            P3_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P3_V_2_d0 <= P3_DRAM_addr_read_reg_434;

    P3_V_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln20_fu_329_p3)
    begin
        if ((not((select_ln20_fu_329_p3 = ap_const_lv2_0)) and not((select_ln20_fu_329_p3 = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            P3_V_2_we0 <= ap_const_logic_1;
        else 
            P3_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln20_1_fu_337_p2 <= std_logic_vector(unsigned(i_fu_94) + unsigned(ap_const_lv13_1));
    add_ln20_fu_288_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv15_1));
    add_ln22_fu_364_p2 <= std_logic_vector(unsigned(select_ln20_fu_329_p3) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_P1_DRAM_RVALID, icmp_ln20_reg_416, m_axi_P2_DRAM_RVALID, m_axi_P3_DRAM_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln20_reg_416 = ap_const_lv1_0) and (m_axi_P1_DRAM_RVALID = ap_const_logic_0)) or ((icmp_ln20_reg_416 = ap_const_lv1_0) and (m_axi_P3_DRAM_RVALID = ap_const_logic_0)) or ((icmp_ln20_reg_416 = ap_const_lv1_0) and (m_axi_P2_DRAM_RVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_P1_DRAM_RVALID, icmp_ln20_reg_416, m_axi_P2_DRAM_RVALID, m_axi_P3_DRAM_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln20_reg_416 = ap_const_lv1_0) and (m_axi_P1_DRAM_RVALID = ap_const_logic_0)) or ((icmp_ln20_reg_416 = ap_const_lv1_0) and (m_axi_P3_DRAM_RVALID = ap_const_logic_0)) or ((icmp_ln20_reg_416 = ap_const_lv1_0) and (m_axi_P2_DRAM_RVALID = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_P1_DRAM_RVALID, icmp_ln20_reg_416, m_axi_P2_DRAM_RVALID, m_axi_P3_DRAM_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((icmp_ln20_reg_416 = ap_const_lv1_0) and (m_axi_P1_DRAM_RVALID = ap_const_logic_0)) or ((icmp_ln20_reg_416 = ap_const_lv1_0) and (m_axi_P3_DRAM_RVALID = ap_const_logic_0)) or ((icmp_ln20_reg_416 = ap_const_lv1_0) and (m_axi_P2_DRAM_RVALID = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln20_fu_282_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln20_fu_282_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln20_reg_416, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln20_reg_416 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_98)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_98;
        end if; 
    end process;

    icmp_ln20_fu_282_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv15_4A10) else "0";
    icmp_ln22_fu_323_p2 <= "1" when (j_fu_90 = ap_const_lv2_3) else "0";
    m_axi_P1_DRAM_ARADDR <= ap_const_lv64_0;
    m_axi_P1_DRAM_ARBURST <= ap_const_lv2_0;
    m_axi_P1_DRAM_ARCACHE <= ap_const_lv4_0;
    m_axi_P1_DRAM_ARID <= ap_const_lv1_0;
    m_axi_P1_DRAM_ARLEN <= ap_const_lv32_0;
    m_axi_P1_DRAM_ARLOCK <= ap_const_lv2_0;
    m_axi_P1_DRAM_ARPROT <= ap_const_lv3_0;
    m_axi_P1_DRAM_ARQOS <= ap_const_lv4_0;
    m_axi_P1_DRAM_ARREGION <= ap_const_lv4_0;
    m_axi_P1_DRAM_ARSIZE <= ap_const_lv3_0;
    m_axi_P1_DRAM_ARUSER <= ap_const_lv1_0;
    m_axi_P1_DRAM_ARVALID <= ap_const_logic_0;
    m_axi_P1_DRAM_AWADDR <= ap_const_lv64_0;
    m_axi_P1_DRAM_AWBURST <= ap_const_lv2_0;
    m_axi_P1_DRAM_AWCACHE <= ap_const_lv4_0;
    m_axi_P1_DRAM_AWID <= ap_const_lv1_0;
    m_axi_P1_DRAM_AWLEN <= ap_const_lv32_0;
    m_axi_P1_DRAM_AWLOCK <= ap_const_lv2_0;
    m_axi_P1_DRAM_AWPROT <= ap_const_lv3_0;
    m_axi_P1_DRAM_AWQOS <= ap_const_lv4_0;
    m_axi_P1_DRAM_AWREGION <= ap_const_lv4_0;
    m_axi_P1_DRAM_AWSIZE <= ap_const_lv3_0;
    m_axi_P1_DRAM_AWUSER <= ap_const_lv1_0;
    m_axi_P1_DRAM_AWVALID <= ap_const_logic_0;
    m_axi_P1_DRAM_BREADY <= ap_const_logic_0;

    m_axi_P1_DRAM_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln20_reg_416, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln20_reg_416 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_P1_DRAM_RREADY <= ap_const_logic_1;
        else 
            m_axi_P1_DRAM_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_P1_DRAM_WDATA <= ap_const_lv32_0;
    m_axi_P1_DRAM_WID <= ap_const_lv1_0;
    m_axi_P1_DRAM_WLAST <= ap_const_logic_0;
    m_axi_P1_DRAM_WSTRB <= ap_const_lv4_0;
    m_axi_P1_DRAM_WUSER <= ap_const_lv1_0;
    m_axi_P1_DRAM_WVALID <= ap_const_logic_0;
    m_axi_P2_DRAM_ARADDR <= ap_const_lv64_0;
    m_axi_P2_DRAM_ARBURST <= ap_const_lv2_0;
    m_axi_P2_DRAM_ARCACHE <= ap_const_lv4_0;
    m_axi_P2_DRAM_ARID <= ap_const_lv1_0;
    m_axi_P2_DRAM_ARLEN <= ap_const_lv32_0;
    m_axi_P2_DRAM_ARLOCK <= ap_const_lv2_0;
    m_axi_P2_DRAM_ARPROT <= ap_const_lv3_0;
    m_axi_P2_DRAM_ARQOS <= ap_const_lv4_0;
    m_axi_P2_DRAM_ARREGION <= ap_const_lv4_0;
    m_axi_P2_DRAM_ARSIZE <= ap_const_lv3_0;
    m_axi_P2_DRAM_ARUSER <= ap_const_lv1_0;
    m_axi_P2_DRAM_ARVALID <= ap_const_logic_0;
    m_axi_P2_DRAM_AWADDR <= ap_const_lv64_0;
    m_axi_P2_DRAM_AWBURST <= ap_const_lv2_0;
    m_axi_P2_DRAM_AWCACHE <= ap_const_lv4_0;
    m_axi_P2_DRAM_AWID <= ap_const_lv1_0;
    m_axi_P2_DRAM_AWLEN <= ap_const_lv32_0;
    m_axi_P2_DRAM_AWLOCK <= ap_const_lv2_0;
    m_axi_P2_DRAM_AWPROT <= ap_const_lv3_0;
    m_axi_P2_DRAM_AWQOS <= ap_const_lv4_0;
    m_axi_P2_DRAM_AWREGION <= ap_const_lv4_0;
    m_axi_P2_DRAM_AWSIZE <= ap_const_lv3_0;
    m_axi_P2_DRAM_AWUSER <= ap_const_lv1_0;
    m_axi_P2_DRAM_AWVALID <= ap_const_logic_0;
    m_axi_P2_DRAM_BREADY <= ap_const_logic_0;

    m_axi_P2_DRAM_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln20_reg_416, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln20_reg_416 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_P2_DRAM_RREADY <= ap_const_logic_1;
        else 
            m_axi_P2_DRAM_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_P2_DRAM_WDATA <= ap_const_lv32_0;
    m_axi_P2_DRAM_WID <= ap_const_lv1_0;
    m_axi_P2_DRAM_WLAST <= ap_const_logic_0;
    m_axi_P2_DRAM_WSTRB <= ap_const_lv4_0;
    m_axi_P2_DRAM_WUSER <= ap_const_lv1_0;
    m_axi_P2_DRAM_WVALID <= ap_const_logic_0;
    m_axi_P3_DRAM_ARADDR <= ap_const_lv64_0;
    m_axi_P3_DRAM_ARBURST <= ap_const_lv2_0;
    m_axi_P3_DRAM_ARCACHE <= ap_const_lv4_0;
    m_axi_P3_DRAM_ARID <= ap_const_lv1_0;
    m_axi_P3_DRAM_ARLEN <= ap_const_lv32_0;
    m_axi_P3_DRAM_ARLOCK <= ap_const_lv2_0;
    m_axi_P3_DRAM_ARPROT <= ap_const_lv3_0;
    m_axi_P3_DRAM_ARQOS <= ap_const_lv4_0;
    m_axi_P3_DRAM_ARREGION <= ap_const_lv4_0;
    m_axi_P3_DRAM_ARSIZE <= ap_const_lv3_0;
    m_axi_P3_DRAM_ARUSER <= ap_const_lv1_0;
    m_axi_P3_DRAM_ARVALID <= ap_const_logic_0;
    m_axi_P3_DRAM_AWADDR <= ap_const_lv64_0;
    m_axi_P3_DRAM_AWBURST <= ap_const_lv2_0;
    m_axi_P3_DRAM_AWCACHE <= ap_const_lv4_0;
    m_axi_P3_DRAM_AWID <= ap_const_lv1_0;
    m_axi_P3_DRAM_AWLEN <= ap_const_lv32_0;
    m_axi_P3_DRAM_AWLOCK <= ap_const_lv2_0;
    m_axi_P3_DRAM_AWPROT <= ap_const_lv3_0;
    m_axi_P3_DRAM_AWQOS <= ap_const_lv4_0;
    m_axi_P3_DRAM_AWREGION <= ap_const_lv4_0;
    m_axi_P3_DRAM_AWSIZE <= ap_const_lv3_0;
    m_axi_P3_DRAM_AWUSER <= ap_const_lv1_0;
    m_axi_P3_DRAM_AWVALID <= ap_const_logic_0;
    m_axi_P3_DRAM_BREADY <= ap_const_logic_0;

    m_axi_P3_DRAM_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln20_reg_416, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln20_reg_416 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_P3_DRAM_RREADY <= ap_const_logic_1;
        else 
            m_axi_P3_DRAM_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_P3_DRAM_WDATA <= ap_const_lv32_0;
    m_axi_P3_DRAM_WID <= ap_const_lv1_0;
    m_axi_P3_DRAM_WLAST <= ap_const_logic_0;
    m_axi_P3_DRAM_WSTRB <= ap_const_lv4_0;
    m_axi_P3_DRAM_WUSER <= ap_const_lv1_0;
    m_axi_P3_DRAM_WVALID <= ap_const_logic_0;
    select_ln20_1_fu_343_p3 <= 
        add_ln20_1_fu_337_p2 when (icmp_ln22_fu_323_p2(0) = '1') else 
        i_fu_94;
    select_ln20_fu_329_p3 <= 
        ap_const_lv2_0 when (icmp_ln22_fu_323_p2(0) = '1') else 
        j_fu_90;
    zext_ln20_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_1_fu_343_p3),64));
end behav;
